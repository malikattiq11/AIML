<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/AIML/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/AIML/" rel="alternate" type="text/html" /><updated>2024-10-30T06:55:20+00:00</updated><id>http://localhost:4000/AIML/feed.xml</id><title type="html">AI Ml</title><entry><title type="html">Test</title><link href="http://localhost:4000/AIML/ai/2024/10/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Test" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/welcome-to-jekyll.html"><![CDATA[<p>hello this is test blog post.</p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[hello this is test blog post.]]></summary></entry><entry><title type="html">A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest</title><link href="http://localhost:4000/AIML/blog/2024/10/28/anomaly-detection-blog.html" rel="alternate" type="text/html" title="A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/blog/2024/10/28/anomaly-detection-blog</id><content type="html" xml:base="http://localhost:4000/AIML/blog/2024/10/28/anomaly-detection-blog.html"><![CDATA[<h1 id="a-deep-dive-into-modern-anomaly-detection-techniques-kde-and-isolation-forest">A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest</h1>

<p>In today’s data-driven world, detecting anomalies or outliers has become increasingly crucial across various domains - from fraud detection in financial transactions to identifying manufacturing defects or detecting network intrusions. This blog post explores two powerful techniques for anomaly detection: Kernel Density Estimation (KDE) and Isolation Forest.</p>

<h2 id="the-challenge-of-anomaly-detection">The Challenge of Anomaly Detection</h2>

<p>Before diving into specific techniques, let’s understand what makes anomaly detection challenging:</p>
<ul>
  <li>Anomalies are rare by definition, leading to highly imbalanced datasets</li>
  <li>Normal behavior can be complex and evolve over time</li>
  <li>The boundary between normal and anomalous behavior is often fuzzy</li>
  <li>Different domains require different sensitivity levels</li>
</ul>

<h2 id="kernel-density-estimation-kde">Kernel Density Estimation (KDE)</h2>

<h3 id="what-is-kde">What is KDE?</h3>

<p>Kernel Density Estimation is a non-parametric method for estimating the probability density function of a random variable. In simpler terms, it helps us understand how likely we are to observe a particular value based on our existing data.</p>

<h3 id="how-kde-works">How KDE Works</h3>

<ol>
  <li>For each data point, KDE places a kernel (typically a Gaussian function) centered at that point</li>
  <li>These kernels are then summed to create a smooth density estimate</li>
  <li>Points in regions of low density are considered potential anomalies</li>
</ol>

<h3 id="mathematical-foundation">Mathematical Foundation</h3>
<p>The KDE estimator is defined as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f̂(x) = (1/nh) Σᵢ K((x - xᵢ)/h)
</code></pre></div></div>
<p>where:</p>
<ul>
  <li>n is the number of data points</li>
  <li>h is the bandwidth parameter</li>
  <li>K is the kernel function</li>
  <li>xᵢ are the individual data points</li>
</ul>

<h3 id="advantages-of-kde">Advantages of KDE</h3>
<ul>
  <li>Provides a robust probability estimate</li>
  <li>Works well with continuous data</li>
  <li>No assumptions about underlying distribution</li>
  <li>Offers interpretable results</li>
</ul>

<h3 id="limitations">Limitations</h3>
<ul>
  <li>Computationally intensive for large datasets</li>
  <li>Sensitive to bandwidth selection</li>
  <li>Struggles with high-dimensional data (curse of dimensionality)</li>
</ul>

<h2 id="isolation-forest">Isolation Forest</h2>

<h3 id="the-innovative-approach">The Innovative Approach</h3>

<p>Isolation Forest takes a fundamentally different approach to anomaly detection. Instead of modeling normal behavior or measuring distances, it exploits a key property of anomalies: they are few and different.</p>

<h3 id="core-concept">Core Concept</h3>

<p>The algorithm is based on a brilliantly simple insight: anomalies are easier to isolate than normal points. Think about it - outliers typically lie in sparse regions of the feature space, making them easier to “isolate” through random partitioning.</p>

<h3 id="how-isolation-forest-works">How Isolation Forest Works</h3>

<ol>
  <li><strong>Random Subsample</strong>: Select a random subsample of the dataset</li>
  <li><strong>Build Trees</strong>:
    <ul>
      <li>Randomly select a feature</li>
      <li>Randomly select a split value between the feature’s min and max</li>
      <li>Create two groups based on this split</li>
      <li>Repeat until each point is isolated</li>
    </ul>
  </li>
  <li><strong>Scoring</strong>: Anomaly score is based on the average path length to isolate each point</li>
</ol>

<h3 id="key-advantages">Key Advantages</h3>

<ul>
  <li>Linear time complexity O(n)</li>
  <li>Handles high-dimensional data well</li>
  <li>Requires minimal memory</li>
  <li>No distance computation needed</li>
  <li>Works well without parameter tuning</li>
</ul>

<h3 id="practical-considerations">Practical Considerations</h3>
<ul>
  <li>Usually performs best with a contamination factor of 0.1</li>
  <li>More efficient than traditional distance-based methods</li>
  <li>Can handle both global and local anomalies</li>
</ul>

<h2 id="comparison-and-use-cases">Comparison and Use Cases</h2>

<h3 id="when-to-use-kde">When to Use KDE</h3>
<ul>
  <li>When you need probability estimates</li>
  <li>For continuous, low-dimensional data</li>
  <li>When computational resources aren’t a constraint</li>
  <li>When interpretability is important</li>
</ul>

<h3 id="when-to-use-isolation-forest">When to Use Isolation Forest</h3>
<ul>
  <li>For large-scale applications</li>
  <li>With high-dimensional data</li>
  <li>When speed is crucial</li>
  <li>When dealing with mixed-type features</li>
</ul>

<h2 id="implementation-example">Implementation Example</h2>

<p>Here’s a simple Python example combining both methods:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KernelDensity</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">IsolationForest</span>

<span class="c1"># Generate sample data
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">normal_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">anomalies</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">([</span><span class="n">normal_data</span><span class="p">,</span> <span class="n">anomalies</span><span class="p">])</span>

<span class="c1"># KDE Implementation
</span><span class="n">kde</span> <span class="o">=</span> <span class="nc">KernelDensity</span><span class="p">(</span><span class="n">bandwidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">kde</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">kde_scores</span> <span class="o">=</span> <span class="o">-</span><span class="n">kde</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">kde_threshold</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">kde_scores</span><span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
<span class="n">kde_anomalies</span> <span class="o">=</span> <span class="n">kde_scores</span> <span class="o">&gt;</span> <span class="n">kde_threshold</span>

<span class="c1"># Isolation Forest Implementation
</span><span class="n">iso_forest</span> <span class="o">=</span> <span class="nc">IsolationForest</span><span class="p">(</span><span class="n">contamination</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">iso_forest</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">iso_anomalies</span> <span class="o">=</span> <span class="n">iso_forest</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Preparation</strong>
    <ul>
      <li>Scale features appropriately</li>
      <li>Handle missing values</li>
      <li>Consider dimensional reduction for high-dimensional data</li>
    </ul>
  </li>
  <li><strong>Model Selection</strong>
    <ul>
      <li>Start with Isolation Forest for large datasets</li>
      <li>Use KDE when probabilistic interpretation is needed</li>
      <li>Consider ensemble approaches for critical applications</li>
    </ul>
  </li>
  <li><strong>Validation</strong>
    <ul>
      <li>Use domain expertise to validate results</li>
      <li>Consider multiple threshold levels</li>
      <li>Monitor false positive rates</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Both KDE and Isolation Forest offer powerful approaches to anomaly detection, each with its own strengths. KDE provides a robust statistical foundation and interpretable results, while Isolation Forest offers exceptional efficiency and scalability. The choice between them often depends on specific use case requirements, data characteristics, and computational constraints.</p>

<p>Remember that anomaly detection is as much an art as it is a science - successful implementation often requires careful tuning and domain expertise. As with many machine learning techniques, the key is not just understanding the algorithms but knowing when and how to apply them effectively.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest]]></summary></entry><entry><title type="html">Advanced Techniques in Modern Anomaly Detection: Beyond Basic KDE and Isolation Forest</title><link href="http://localhost:4000/AIML/ai/2024/10/28/advanced-anomaly-detection.html" rel="alternate" type="text/html" title="Advanced Techniques in Modern Anomaly Detection: Beyond Basic KDE and Isolation Forest" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/advanced-anomaly-detection</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/advanced-anomaly-detection.html"><![CDATA[<h1 id="advanced-techniques-in-modern-anomaly-detection-beyond-basic-kde-and-isolation-forest">Advanced Techniques in Modern Anomaly Detection: Beyond Basic KDE and Isolation Forest</h1>

<h2 id="introduction-the-complexity-of-modern-anomaly-detection">Introduction: The Complexity of Modern Anomaly Detection</h2>

<p>In today’s complex data landscapes, traditional anomaly detection approaches often fall short. This deep technical dive explores advanced implementations of Kernel Density Estimation (KDE) and Isolation Forest, including ensemble methods, adaptive techniques, and real-world optimization strategies.</p>

<h2 id="advanced-kernel-density-estimation">Advanced Kernel Density Estimation</h2>

<h3 id="adaptive-bandwidth-selection">Adaptive Bandwidth Selection</h3>

<p>Traditional KDE uses fixed bandwidth, but adaptive methods can significantly improve performance:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KernelDensity</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">class</span> <span class="nc">AdaptiveKDE</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">bandwidths</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">logspace</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">)):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bandwidths</span> <span class="o">=</span> <span class="n">bandwidths</span>
        <span class="n">self</span><span class="p">.</span><span class="n">kde_models</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="c1"># Perform cross-validation for each local region
</span>        <span class="k">for</span> <span class="n">region_idx</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="nf">_get_regions</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
            <span class="n">region_data</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">region_idx</span><span class="p">]</span>
            <span class="n">grid_search</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span>
                <span class="nc">KernelDensity</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="sh">'</span><span class="s">gaussian</span><span class="sh">'</span><span class="p">),</span>
                <span class="p">{</span><span class="sh">'</span><span class="s">bandwidth</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">bandwidths</span><span class="p">},</span>
                <span class="n">cv</span><span class="o">=</span><span class="mi">5</span>
            <span class="p">)</span>
            <span class="n">grid_search</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">region_data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">kde_models</span><span class="p">[</span><span class="n">region_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_estimator_</span>
            
    <span class="k">def</span> <span class="nf">_get_regions</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="c1"># Implement region splitting logic (e.g., using clustering)
</span>        <span class="k">pass</span>
</code></pre></div></div>

<h3 id="multi-scale-kde">Multi-Scale KDE</h3>

<p>Implementing a multi-scale approach to capture both local and global anomalies:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MultiScaleKDE</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">scale_factors</span><span class="o">=</span><span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">]):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scale_factors</span> <span class="o">=</span> <span class="n">scale_factors</span>
        <span class="n">self</span><span class="p">.</span><span class="n">models</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">base_bandwidth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_estimate_base_bandwidth</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">scale</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">scale_factors</span><span class="p">:</span>
            <span class="n">kde</span> <span class="o">=</span> <span class="nc">KernelDensity</span><span class="p">(</span>
                <span class="n">bandwidth</span><span class="o">=</span><span class="n">base_bandwidth</span> <span class="o">*</span> <span class="n">scale</span><span class="p">,</span>
                <span class="n">kernel</span><span class="o">=</span><span class="sh">'</span><span class="s">gaussian</span><span class="sh">'</span>
            <span class="p">)</span>
            <span class="n">kde</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">kde</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">score_samples</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">scores</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">models</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">X</span><span class="p">)))</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">kde</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">models</span><span class="p">):</span>
            <span class="n">scores</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">kde</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="enhanced-isolation-forest">Enhanced Isolation Forest</h2>

<h3 id="extended-isolation-forest-eif">Extended Isolation Forest (EIF)</h3>

<p>The extended version improves upon the original by considering hyperplanes for splitting:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ExtendedIsolationForest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">sample_size</span><span class="o">=</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_estimators</span> <span class="o">=</span> <span class="n">n_estimators</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sample_size</span> <span class="o">=</span> <span class="n">sample_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">trees</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">_random_hyperplane_split</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">n_features</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">normal_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">n_features</span><span class="p">)</span>
        <span class="n">normal_vector</span> <span class="o">/=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">normal_vector</span><span class="p">)</span>
        <span class="n">point</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">normal_vector</span><span class="p">,</span> <span class="n">point</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_estimators</span><span class="p">):</span>
            <span class="n">tree</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_build_tree</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">trees</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="hybrid-approach-combining-kde-and-isolation-forest">Hybrid Approach: Combining KDE and Isolation Forest</h3>

<p>A novel approach combining the strengths of both methods:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HybridAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">kde_weight</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">if_weight</span><span class="o">=</span><span class="mf">0.6</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">kde_weight</span> <span class="o">=</span> <span class="n">kde_weight</span>
        <span class="n">self</span><span class="p">.</span><span class="n">if_weight</span> <span class="o">=</span> <span class="n">if_weight</span>
        <span class="n">self</span><span class="p">.</span><span class="n">kde</span> <span class="o">=</span> <span class="nc">MultiScaleKDE</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">iforest</span> <span class="o">=</span> <span class="nc">ExtendedIsolationForest</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">kde</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">iforest</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">kde_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">kde</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">if_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">iforest</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        
        <span class="c1"># Normalize scores
</span>        <span class="n">kde_scores</span> <span class="o">=</span> <span class="p">(</span><span class="n">kde_scores</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">kde_scores</span><span class="p">))</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">std</span><span class="p">(</span><span class="n">kde_scores</span><span class="p">)</span>
        <span class="n">if_scores</span> <span class="o">=</span> <span class="p">(</span><span class="n">if_scores</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">if_scores</span><span class="p">))</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">std</span><span class="p">(</span><span class="n">if_scores</span><span class="p">)</span>
        
        <span class="c1"># Combine scores
</span>        <span class="n">final_scores</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">kde_weight</span> <span class="o">*</span> <span class="n">kde_scores</span> <span class="o">+</span> 
                       <span class="n">self</span><span class="p">.</span><span class="n">if_weight</span> <span class="o">*</span> <span class="n">if_scores</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">final_scores</span>
</code></pre></div></div>

<h2 id="advanced-optimization-techniques">Advanced Optimization Techniques</h2>

<h3 id="feature-importance-in-anomaly-detection">Feature Importance in Anomaly Detection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_feature_importance</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
    <span class="n">importances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="n">X_permuted</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="n">X_permuted</span><span class="p">[:,</span> <span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">permutation</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span> <span class="n">feature</span><span class="p">])</span>
        
        <span class="c1"># Compare scores before and after permutation
</span>        <span class="n">original_scores</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">permuted_scores</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X_permuted</span><span class="p">)</span>
        
        <span class="n">importances</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">original_scores</span> <span class="o">-</span> <span class="n">permuted_scores</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">importances</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">importances</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="online-learning-implementation">Online Learning Implementation</h3>

<p>For streaming data scenarios:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OnlineAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window_size</span> <span class="o">=</span> <span class="n">window_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data_window</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="bp">None</span>
        
    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data_window</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">new_data</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data_window</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">window_size</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">data_window</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">data_window</span><span class="p">[</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">window_size</span><span class="p">:]</span>
            
        <span class="c1"># Retrain model on updated window
</span>        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">HybridAnomalyDetector</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data_window</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="performance-optimization-and-scalability">Performance Optimization and Scalability</h2>

<h3 id="parallel-processing-implementation">Parallel Processing Implementation</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">joblib</span> <span class="kn">import</span> <span class="n">Parallel</span><span class="p">,</span> <span class="n">delayed</span>

<span class="k">class</span> <span class="nc">ParallelAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_jobs</span> <span class="o">=</span> <span class="n">n_jobs</span>
        
    <span class="k">def</span> <span class="nf">parallel_score</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">chunk_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">chunk_size</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">X</span><span class="p">),</span> <span class="n">chunk_size</span><span class="p">)]</span>
        
        <span class="n">scores</span> <span class="o">=</span> <span class="nc">Parallel</span><span class="p">(</span><span class="n">n_jobs</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">n_jobs</span><span class="p">)(</span>
            <span class="nf">delayed</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_score_chunk</span><span class="p">)(</span><span class="n">chunk</span><span class="p">)</span> 
            <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">chunks</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="advanced-evaluation-metrics">Advanced Evaluation Metrics</h2>

<h3 id="implementation-of-specialized-metrics">Implementation of Specialized Metrics</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_advanced_metrics</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">scores</span><span class="p">):</span>
    <span class="n">metrics</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">precision_at_k</span><span class="sh">'</span><span class="p">:</span> <span class="nf">precision_at_k</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">scores</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span>
        <span class="sh">'</span><span class="s">average_precision</span><span class="sh">'</span><span class="p">:</span> <span class="nf">average_precision_score</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">scores</span><span class="p">),</span>
        <span class="sh">'</span><span class="s">area_under_roc</span><span class="sh">'</span><span class="p">:</span> <span class="nf">roc_auc_score</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">scores</span><span class="p">),</span>
        <span class="sh">'</span><span class="s">area_under_pr</span><span class="sh">'</span><span class="p">:</span> <span class="nf">average_precision_score</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">scores</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1"># Add volume-based metrics
</span>    <span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">volume_ratio</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">calculate_volume_ratio</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">metrics</span>
</code></pre></div></div>

<h2 id="real-world-applications-and-optimizations">Real-World Applications and Optimizations</h2>

<h3 id="time-series-anomaly-detection">Time Series Anomaly Detection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TimeSeriesAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">seasonality_period</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">seasonality_period</span> <span class="o">=</span> <span class="n">seasonality_period</span>
        
    <span class="k">def</span> <span class="nf">transform_time_features</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="c1"># Extract temporal features
</span>        <span class="n">transformed</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">column_stack</span><span class="p">([</span>
            <span class="n">X</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_get_seasonal_features</span><span class="p">(</span><span class="n">X</span><span class="p">),</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_get_trend_features</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="p">])</span>
        <span class="k">return</span> <span class="n">transformed</span>
</code></pre></div></div>

<h3 id="handling-high-cardinality-categorical-features">Handling High Cardinality Categorical Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">handle_categorical_features</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">categorical_columns</span><span class="p">):</span>
    <span class="n">embeddings</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">categorical_columns</span><span class="p">:</span>
        <span class="c1"># Create frequency-based embedding
</span>        <span class="n">value_counts</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">embeddings</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">value_counts</span><span class="p">.</span><span class="nf">to_dict</span><span class="p">()</span>
        
    <span class="k">return</span> <span class="n">embeddings</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Modern anomaly detection requires a sophisticated approach that combines multiple techniques and considers various optimization strategies. The implementations provided here serve as a foundation for building robust, scalable anomaly detection systems that can handle real-world complexities.</p>

<p>Remember that these implementations are templates and should be adapted based on specific use cases and requirements. The key is to understand the underlying principles and modify the code accordingly.</p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Advanced Techniques in Modern Anomaly Detection: Beyond Basic KDE and Isolation Forest]]></summary></entry><entry><title type="html">A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest</title><link href="http://localhost:4000/AIML/ai/2024/10/28/anomaly-detection-blog.html" rel="alternate" type="text/html" title="A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/anomaly-detection-blog</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/anomaly-detection-blog.html"><![CDATA[<h1 id="a-deep-dive-into-modern-anomaly-detection-techniques-kde-and-isolation-forest">A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest</h1>

<p>In today’s data-driven world, detecting anomalies or outliers has become increasingly crucial across various domains - from fraud detection in financial transactions to identifying manufacturing defects or detecting network intrusions. This blog post explores two powerful techniques for anomaly detection: Kernel Density Estimation (KDE) and Isolation Forest.</p>

<h2 id="the-challenge-of-anomaly-detection">The Challenge of Anomaly Detection</h2>

<p>Before diving into specific techniques, let’s understand what makes anomaly detection challenging:</p>
<ul>
  <li>Anomalies are rare by definition, leading to highly imbalanced datasets</li>
  <li>Normal behavior can be complex and evolve over time</li>
  <li>The boundary between normal and anomalous behavior is often fuzzy</li>
  <li>Different domains require different sensitivity levels</li>
</ul>

<h2 id="kernel-density-estimation-kde">Kernel Density Estimation (KDE)</h2>

<h3 id="what-is-kde">What is KDE?</h3>

<p>Kernel Density Estimation is a non-parametric method for estimating the probability density function of a random variable. In simpler terms, it helps us understand how likely we are to observe a particular value based on our existing data.</p>

<h3 id="how-kde-works">How KDE Works</h3>

<ol>
  <li>For each data point, KDE places a kernel (typically a Gaussian function) centered at that point</li>
  <li>These kernels are then summed to create a smooth density estimate</li>
  <li>Points in regions of low density are considered potential anomalies</li>
</ol>

<h3 id="mathematical-foundation">Mathematical Foundation</h3>
<p>The KDE estimator is defined as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f̂(x) = (1/nh) Σᵢ K((x - xᵢ)/h)
</code></pre></div></div>
<p>where:</p>
<ul>
  <li>n is the number of data points</li>
  <li>h is the bandwidth parameter</li>
  <li>K is the kernel function</li>
  <li>xᵢ are the individual data points</li>
</ul>

<h3 id="advantages-of-kde">Advantages of KDE</h3>
<ul>
  <li>Provides a robust probability estimate</li>
  <li>Works well with continuous data</li>
  <li>No assumptions about underlying distribution</li>
  <li>Offers interpretable results</li>
</ul>

<h3 id="limitations">Limitations</h3>
<ul>
  <li>Computationally intensive for large datasets</li>
  <li>Sensitive to bandwidth selection</li>
  <li>Struggles with high-dimensional data (curse of dimensionality)</li>
</ul>

<h2 id="isolation-forest">Isolation Forest</h2>

<h3 id="the-innovative-approach">The Innovative Approach</h3>

<p>Isolation Forest takes a fundamentally different approach to anomaly detection. Instead of modeling normal behavior or measuring distances, it exploits a key property of anomalies: they are few and different.</p>

<h3 id="core-concept">Core Concept</h3>

<p>The algorithm is based on a brilliantly simple insight: anomalies are easier to isolate than normal points. Think about it - outliers typically lie in sparse regions of the feature space, making them easier to “isolate” through random partitioning.</p>

<h3 id="how-isolation-forest-works">How Isolation Forest Works</h3>

<ol>
  <li><strong>Random Subsample</strong>: Select a random subsample of the dataset</li>
  <li><strong>Build Trees</strong>:
    <ul>
      <li>Randomly select a feature</li>
      <li>Randomly select a split value between the feature’s min and max</li>
      <li>Create two groups based on this split</li>
      <li>Repeat until each point is isolated</li>
    </ul>
  </li>
  <li><strong>Scoring</strong>: Anomaly score is based on the average path length to isolate each point</li>
</ol>

<h3 id="key-advantages">Key Advantages</h3>

<ul>
  <li>Linear time complexity O(n)</li>
  <li>Handles high-dimensional data well</li>
  <li>Requires minimal memory</li>
  <li>No distance computation needed</li>
  <li>Works well without parameter tuning</li>
</ul>

<h3 id="practical-considerations">Practical Considerations</h3>
<ul>
  <li>Usually performs best with a contamination factor of 0.1</li>
  <li>More efficient than traditional distance-based methods</li>
  <li>Can handle both global and local anomalies</li>
</ul>

<h2 id="comparison-and-use-cases">Comparison and Use Cases</h2>

<h3 id="when-to-use-kde">When to Use KDE</h3>
<ul>
  <li>When you need probability estimates</li>
  <li>For continuous, low-dimensional data</li>
  <li>When computational resources aren’t a constraint</li>
  <li>When interpretability is important</li>
</ul>

<h3 id="when-to-use-isolation-forest">When to Use Isolation Forest</h3>
<ul>
  <li>For large-scale applications</li>
  <li>With high-dimensional data</li>
  <li>When speed is crucial</li>
  <li>When dealing with mixed-type features</li>
</ul>

<h2 id="implementation-example">Implementation Example</h2>

<p>Here’s a simple Python example combining both methods:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KernelDensity</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">IsolationForest</span>

<span class="c1"># Generate sample data
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">normal_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">anomalies</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">([</span><span class="n">normal_data</span><span class="p">,</span> <span class="n">anomalies</span><span class="p">])</span>

<span class="c1"># KDE Implementation
</span><span class="n">kde</span> <span class="o">=</span> <span class="nc">KernelDensity</span><span class="p">(</span><span class="n">bandwidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">kde</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">kde_scores</span> <span class="o">=</span> <span class="o">-</span><span class="n">kde</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">kde_threshold</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">kde_scores</span><span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
<span class="n">kde_anomalies</span> <span class="o">=</span> <span class="n">kde_scores</span> <span class="o">&gt;</span> <span class="n">kde_threshold</span>

<span class="c1"># Isolation Forest Implementation
</span><span class="n">iso_forest</span> <span class="o">=</span> <span class="nc">IsolationForest</span><span class="p">(</span><span class="n">contamination</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">iso_forest</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">iso_anomalies</span> <span class="o">=</span> <span class="n">iso_forest</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Preparation</strong>
    <ul>
      <li>Scale features appropriately</li>
      <li>Handle missing values</li>
      <li>Consider dimensional reduction for high-dimensional data</li>
    </ul>
  </li>
  <li><strong>Model Selection</strong>
    <ul>
      <li>Start with Isolation Forest for large datasets</li>
      <li>Use KDE when probabilistic interpretation is needed</li>
      <li>Consider ensemble approaches for critical applications</li>
    </ul>
  </li>
  <li><strong>Validation</strong>
    <ul>
      <li>Use domain expertise to validate results</li>
      <li>Consider multiple threshold levels</li>
      <li>Monitor false positive rates</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Both KDE and Isolation Forest offer powerful approaches to anomaly detection, each with its own strengths. KDE provides a robust statistical foundation and interpretable results, while Isolation Forest offers exceptional efficiency and scalability. The choice between them often depends on specific use case requirements, data characteristics, and computational constraints.</p>

<p>Remember that anomaly detection is as much an art as it is a science - successful implementation often requires careful tuning and domain expertise. As with many machine learning techniques, the key is not just understanding the algorithms but knowing when and how to apply them effectively.</p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[A Deep Dive into Modern Anomaly Detection Techniques: KDE and Isolation Forest]]></summary></entry><entry><title type="html">Differential Privacy: Making Data Analysis Safe Without Sacrificing Insights</title><link href="http://localhost:4000/AIML/ai/2024/10/28/differential-privacy-blog.html" rel="alternate" type="text/html" title="Differential Privacy: Making Data Analysis Safe Without Sacrificing Insights" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/differential-privacy-blog</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/differential-privacy-blog.html"><![CDATA[<h1 id="differential-privacy-making-data-analysis-safe-without-sacrificing-insights">Differential Privacy: Making Data Analysis Safe Without Sacrificing Insights</h1>

<h2 id="what-is-differential-privacy-really">What is Differential Privacy, Really?</h2>

<p>Imagine you’re trying to find out how many of your coworkers like pineapple on pizza, but nobody wants to admit it publicly. Differential privacy is like asking everyone to flip a coin in private: heads they tell the truth, tails they give a random answer. You can still figure out the overall trend, but nobody knows for sure about any individual.</p>

<h2 id="why-should-you-care">Why Should You Care?</h2>

<ul>
  <li><strong>Real-world use</strong>: Apple uses it to gather usage statistics</li>
  <li><strong>Research benefits</strong>: Enables sharing sensitive datasets</li>
  <li><strong>Legal compliance</strong>: Helps meet GDPR and CCPA requirements</li>
</ul>

<h2 id="how-does-it-work-a-simple-example">How Does It Work? A Simple Example</h2>

<p>Let’s start with a basic example in Python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">true_count</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Add noise to a count to make it differentially private
    
    Args:
    true_count (int): The actual count
    epsilon (float): Privacy parameter (lower = more private)
    
    Returns:
    int: Privacy-protected count
    </span><span class="sh">"""</span>
    <span class="n">noise</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">laplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">epsilon</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">true_count</span> <span class="o">+</span> <span class="n">noise</span><span class="p">)))</span>

<span class="c1"># Example usage
</span><span class="n">real_pizza_lovers</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">private_count</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">real_pizza_lovers</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Private count: </span><span class="si">{</span><span class="n">private_count</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="whats-happening-here">What’s Happening Here?</h3>
<ol>
  <li>We start with the true count (50 pizza lovers)</li>
  <li>Add random noise using the Laplace distribution</li>
  <li>The amount of noise is controlled by epsilon (ε)
    <ul>
      <li>Lower ε = more privacy but less accuracy</li>
      <li>Higher ε = less privacy but more accuracy</li>
    </ul>
  </li>
</ol>

<h2 id="the-math-dont-worry-well-keep-it-simple">The Math (Don’t Worry, We’ll Keep It Simple)</h2>

<p>At its core, differential privacy guarantees that:</p>

<p>P(A(D) = x) ≤ eᵋ × P(A(D’) = x)</p>

<p>Where:</p>
<ul>
  <li>D and D’ are datasets differing by one person</li>
  <li>A is our analysis function</li>
  <li>ε (epsilon) is our privacy parameter</li>
</ul>

<p>In plain English: The probability of getting any specific result shouldn’t change much whether or not any individual is in the dataset.</p>

<h2 id="real-world-examples">Real-World Examples</h2>

<h3 id="1-finding-average-salary">1. Finding Average Salary</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">private_mean</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">sensitivity</span><span class="o">=</span><span class="mi">100000</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Calculate differentially private mean
    
    Args:
    data (list): List of salaries
    epsilon (float): Privacy parameter
    sensitivity (float): Maximum change one person can make
    
    Returns:
    float: Privacy-protected mean
    </span><span class="sh">"""</span>
    <span class="n">true_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">noise</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">laplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sensitivity</span><span class="o">/</span><span class="p">(</span><span class="n">epsilon</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">true_mean</span> <span class="o">+</span> <span class="n">noise</span>

<span class="c1"># Example usage
</span><span class="n">salaries</span> <span class="o">=</span> <span class="p">[</span><span class="mi">60000</span><span class="p">,</span> <span class="mi">65000</span><span class="p">,</span> <span class="mi">70000</span><span class="p">,</span> <span class="mi">75000</span><span class="p">,</span> <span class="mi">80000</span><span class="p">]</span>
<span class="n">private_avg</span> <span class="o">=</span> <span class="nf">private_mean</span><span class="p">(</span><span class="n">salaries</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Private average salary: $</span><span class="si">{</span><span class="n">private_avg</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="2-building-a-histogram">2. Building a Histogram</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">private_histogram</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">bins</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Create a differentially private histogram
    
    Args:
    data (list): Data points
    bins (list): Bin edges
    epsilon (float): Privacy parameter
    
    Returns:
    list: Privacy-protected bin counts
    </span><span class="sh">"""</span>
    <span class="n">true_hist</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">histogram</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="n">bins</span><span class="p">)</span>
    <span class="n">noisy_hist</span> <span class="o">=</span> <span class="p">[</span><span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">bins</span><span class="p">))</span> 
                  <span class="k">for</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">true_hist</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">noisy_hist</span>

<span class="c1"># Example usage
</span><span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
<span class="n">age_bins</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">]</span>
<span class="n">private_hist</span> <span class="o">=</span> <span class="nf">private_histogram</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="n">age_bins</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Private age distribution:</span><span class="sh">"</span><span class="p">,</span> <span class="n">private_hist</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="common-pitfalls-and-how-to-avoid-them">Common Pitfalls and How to Avoid Them</h2>

<ol>
  <li><strong>Using Too Much Privacy Budget</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bad: Using full budget for each query
</span><span class="n">result1</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
<span class="n">result2</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>  <span class="c1"># Privacy degraded!
</span>   
<span class="c1"># Good: Split privacy budget
</span><span class="n">result1</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">result2</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Forgetting About Sensitivity</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bad: Not considering how much one person affects the result
</span><span class="k">def</span> <span class="nf">unsafe_average</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">laplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">epsilon</span><span class="p">)</span>
   
<span class="c1"># Good: Account for sensitivity
</span><span class="k">def</span> <span class="nf">safe_average</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="p">,</span> <span class="n">min_val</span><span class="p">,</span> <span class="n">max_val</span><span class="p">):</span>
    <span class="n">sensitivity</span> <span class="o">=</span> <span class="p">(</span><span class="n">max_val</span> <span class="o">-</span> <span class="n">min_val</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">laplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sensitivity</span><span class="o">/</span><span class="n">epsilon</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="tools-and-libraries">Tools and Libraries</h2>

<ol>
  <li><strong>Google’s Differential Privacy Library</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">diffprivlib</span> <span class="kn">import</span> <span class="n">mechanisms</span>
   
<span class="n">mech</span> <span class="o">=</span> <span class="n">mechanisms</span><span class="p">.</span><span class="nc">Laplace</span><span class="p">(</span><span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">sensitivity</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">private_result</span> <span class="o">=</span> <span class="n">mech</span><span class="p">.</span><span class="nf">randomise</span><span class="p">(</span><span class="n">true_count</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>IBM’s Diffprivlib</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">diffprivlib</span> <span class="kn">import</span> <span class="n">tools</span>
   
<span class="n">private_mean</span> <span class="o">=</span> <span class="n">tools</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Start with High Privacy</strong>
    <ul>
      <li>Begin with low ε (high privacy)</li>
      <li>Gradually increase if needed</li>
    </ul>
  </li>
  <li><strong>Use Privacy Budget Wisely</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">total_epsilon</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">query_epsilon</span> <span class="o">=</span> <span class="n">total_epsilon</span> <span class="o">/</span> <span class="n">num_queries</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Test with Different Epsilons</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">epsilons</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">]</span>
<span class="k">for</span> <span class="n">eps</span> <span class="ow">in</span> <span class="n">epsilons</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">true_count</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="n">eps</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ε=</span><span class="si">{</span><span class="n">eps</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">result</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="challenges-and-limitations">Challenges and Limitations</h2>

<ol>
  <li><strong>Accuracy vs. Privacy Tradeoff</strong>
    <ul>
      <li>More privacy = less accurate results</li>
      <li>Solution: Collect more data or use advanced composition theorems</li>
    </ul>
  </li>
  <li><strong>Multiple Queries</strong>
    <ul>
      <li>Privacy guarantees degrade with multiple queries</li>
      <li>Solution: Track and limit total privacy budget</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Differential Privacy: Making Data Analysis Safe Without Sacrificing Insights]]></summary></entry><entry><title type="html">Federated Learning in Healthcare: A Practical Guide</title><link href="http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog-(1).html" rel="alternate" type="text/html" title="Federated Learning in Healthcare: A Practical Guide" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog%20(1)</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog-(1).html"><![CDATA[<h1 id="federated-learning-in-healthcare-a-practical-guide">Federated Learning in Healthcare: A Practical Guide</h1>

<h2 id="why-federated-learning-for-healthcare">Why Federated Learning for Healthcare?</h2>

<p>Healthcare data is:</p>
<ol>
  <li>Highly sensitive (HIPAA, GDPR)</li>
  <li>Siloed across hospitals</li>
  <li>Valuable for research and improving patient care</li>
</ol>

<p>Federated learning allows hospitals to collaborate without sharing raw patient data.</p>

<h2 id="practical-implementation">Practical Implementation</h2>

<h3 id="1-basic-medical-image-classification">1. Basic Medical Image Classification</h3>

<p>Let’s start with a simplified example of classifying X-ray images across multiple hospitals:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.neural_network</span> <span class="kn">import</span> <span class="n">MLPClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>

<span class="k">class</span> <span class="nc">Hospital</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hospital_id</span><span class="p">,</span> <span class="n">x_ray_data</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="n">hospital_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">x_ray_data</span>  <span class="c1"># Simplified as numerical features
</span>        <span class="n">self</span><span class="p">.</span><span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span>    <span class="c1"># Binary: 0 for normal, 1 for abnormal
</span>        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">preprocess_data</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">global_model</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">preprocess_data</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">global_model</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">local_model</span> <span class="o">=</span> <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">hidden_layer_sizes</span><span class="o">=</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
                                       <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">local_model</span> <span class="o">=</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
        
        <span class="n">local_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">labels</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">get_model_params</span><span class="p">(</span><span class="n">local_model</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">evaluate_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">preprocess_data</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">model</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">labels</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>
    <span class="n">new_model</span> <span class="o">=</span> <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">hidden_layer_sizes</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">hidden_layer_sizes</span><span class="p">)</span>
    <span class="n">new_model</span><span class="p">.</span><span class="n">coefs_</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">coefs_</span><span class="p">]</span>
    <span class="n">new_model</span><span class="p">.</span><span class="n">intercepts_</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">intercepts_</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">new_model</span>

<span class="k">def</span> <span class="nf">get_model_params</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">coefs</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">w</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">coefs_</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">intercepts</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">b</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">intercepts_</span><span class="p">]</span>
    <span class="p">}</span>

<span class="k">def</span> <span class="nf">create_global_model</span><span class="p">(</span><span class="n">params_list</span><span class="p">):</span>
    <span class="c1"># Average the parameters from all hospitals
</span>    <span class="n">avg_coefs</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">coefs</span><span class="sh">"</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params_list</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">params_list</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">coefs</span><span class="sh">"</span><span class="p">]))</span>
    <span class="p">]</span>
    <span class="n">avg_intercepts</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">intercepts</span><span class="sh">"</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params_list</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">params_list</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">intercepts</span><span class="sh">"</span><span class="p">]))</span>
    <span class="p">]</span>
    
    <span class="n">global_model</span> <span class="o">=</span> <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">hidden_layer_sizes</span><span class="o">=</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">))</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">coefs_</span> <span class="o">=</span> <span class="n">avg_coefs</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">intercepts_</span> <span class="o">=</span> <span class="n">avg_intercepts</span>
    <span class="k">return</span> <span class="n">global_model</span>

<span class="c1"># Simulating multiple hospitals
</span><span class="k">def</span> <span class="nf">simulate_federated_learning</span><span class="p">():</span>
    <span class="c1"># Create simulated hospital data
</span>    <span class="n">hospitals</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nc">Hospital</span><span class="p">(</span><span class="sh">"</span><span class="s">H1</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)),</span>
        <span class="nc">Hospital</span><span class="p">(</span><span class="sh">"</span><span class="s">H2</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">800</span><span class="p">)),</span>
        <span class="nc">Hospital</span><span class="p">(</span><span class="sh">"</span><span class="s">H3</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1200</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1200</span><span class="p">))</span>
    <span class="p">]</span>
    
    <span class="n">global_model</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">for</span> <span class="nb">round</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Training Round </span><span class="si">{</span><span class="nb">round</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Local training at each hospital
</span>        <span class="n">local_models</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">hospital</span> <span class="ow">in</span> <span class="n">hospitals</span><span class="p">:</span>
            <span class="n">local_params</span> <span class="o">=</span> <span class="n">hospital</span><span class="p">.</span><span class="nf">train_local_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
            <span class="n">local_models</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">local_params</span><span class="p">)</span>
        
        <span class="c1"># Aggregate models
</span>        <span class="n">global_model</span> <span class="o">=</span> <span class="nf">create_global_model</span><span class="p">(</span><span class="n">local_models</span><span class="p">)</span>
        
        <span class="c1"># Evaluate global model at each hospital
</span>        <span class="k">for</span> <span class="n">hospital</span> <span class="ow">in</span> <span class="n">hospitals</span><span class="p">:</span>
            <span class="n">accuracy</span> <span class="o">=</span> <span class="n">hospital</span><span class="p">.</span><span class="nf">evaluate_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Hospital </span><span class="si">{</span><span class="n">hospital</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> accuracy: </span><span class="si">{</span><span class="n">accuracy</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">global_model</span>

<span class="c1"># Run the simulation
</span><span class="n">final_model</span> <span class="o">=</span> <span class="nf">simulate_federated_learning</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="2-advanced-implementation-patient-outcome-prediction">2. Advanced Implementation: Patient Outcome Prediction</h3>

<p>Now let’s look at a more complex example predicting patient outcomes:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">roc_auc_score</span><span class="p">,</span> <span class="n">precision_recall_curve</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">class</span> <span class="nc">MedicalCenter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">center_id</span><span class="p">,</span> <span class="n">patient_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="n">center_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">patient_data</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">col</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">patient_data</span><span class="p">.</span><span class="n">columns</span> 
                               <span class="k">if</span> <span class="n">col</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">patient_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">outcome</span><span class="sh">'</span><span class="p">]]</span>
    
    <span class="k">def</span> <span class="nf">preprocess_data</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># Handle missing values
</span>        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">int64</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">float64</span><span class="sh">'</span><span class="p">]:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="c1"># Encode categorical variables
</span>        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Categorical</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">col</span><span class="p">]).</span><span class="n">codes</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">],</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">outcome</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">global_model</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">preprocess_data</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">global_model</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">local_model</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">local_model</span> <span class="o">=</span> <span class="n">global_model</span>
        
        <span class="n">local_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">local_model</span>
    
    <span class="k">def</span> <span class="nf">evaluate_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
        <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">preprocess_data</span><span class="p">()</span>
        <span class="n">y_pred_proba</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">X</span><span class="p">)[:,</span> <span class="mi">1</span><span class="p">]</span>
        <span class="n">auc</span> <span class="o">=</span> <span class="nf">roc_auc_score</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y_pred_proba</span><span class="p">)</span>
        
        <span class="n">precision</span><span class="p">,</span> <span class="n">recall</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">precision_recall_curve</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y_pred_proba</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">auc</span><span class="sh">'</span><span class="p">:</span> <span class="n">auc</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">precision</span><span class="sh">'</span><span class="p">:</span> <span class="n">precision</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">recall</span><span class="sh">'</span><span class="p">:</span> <span class="n">recall</span>
        <span class="p">}</span>

<span class="k">def</span> <span class="nf">federated_model_averaging</span><span class="p">(</span><span class="n">models</span><span class="p">):</span>
    <span class="c1"># Average the predictions from all models
</span>    <span class="k">def</span> <span class="nf">averaged_predict_proba</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
        <span class="n">predictions</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="n">predictions</span> <span class="o">+=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">predictions</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>
    
    <span class="c1"># Create a new model with the averaged predict_proba method
</span>    <span class="n">averaged_model</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">()</span>
    <span class="n">averaged_model</span><span class="p">.</span><span class="n">classes_</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">classes_</span>
    <span class="n">averaged_model</span><span class="p">.</span><span class="n">predict_proba</span> <span class="o">=</span> <span class="n">averaged_predict_proba</span>
    
    <span class="k">return</span> <span class="n">averaged_model</span>

<span class="c1"># Simulate federated learning with medical centers
</span><span class="k">def</span> <span class="nf">run_medical_federated_learning</span><span class="p">():</span>
    <span class="c1"># Create simulated medical center data
</span>    <span class="k">def</span> <span class="nf">generate_patient_data</span><span class="p">(</span><span class="n">num_patients</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span>
            <span class="sh">'</span><span class="s">patient_id</span><span class="sh">'</span><span class="p">:</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">age</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">blood_pressure</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">glucose</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">heart_rate</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">gender</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">],</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">smoker</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="sh">'</span><span class="s">Yes</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">No</span><span class="sh">'</span><span class="p">],</span> <span class="n">num_patients</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">outcome</span><span class="sh">'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">num_patients</span><span class="p">)</span>
        <span class="p">})</span>

    <span class="n">medical_centers</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nc">MedicalCenter</span><span class="p">(</span><span class="sh">"</span><span class="s">MC1</span><span class="sh">"</span><span class="p">,</span> <span class="nf">generate_patient_data</span><span class="p">(</span><span class="mi">1000</span><span class="p">)),</span>
        <span class="nc">MedicalCenter</span><span class="p">(</span><span class="sh">"</span><span class="s">MC2</span><span class="sh">"</span><span class="p">,</span> <span class="nf">generate_patient_data</span><span class="p">(</span><span class="mi">800</span><span class="p">)),</span>
        <span class="nc">MedicalCenter</span><span class="p">(</span><span class="sh">"</span><span class="s">MC3</span><span class="sh">"</span><span class="p">,</span> <span class="nf">generate_patient_data</span><span class="p">(</span><span class="mi">1200</span><span class="p">))</span>
    <span class="p">]</span>
    
    <span class="k">for</span> <span class="nb">round</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">Training Round </span><span class="si">{</span><span class="nb">round</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="n">local_models</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">center</span> <span class="ow">in</span> <span class="n">medical_centers</span><span class="p">:</span>
            <span class="n">local_model</span> <span class="o">=</span> <span class="n">center</span><span class="p">.</span><span class="nf">train_local_model</span><span class="p">()</span>
            <span class="n">local_models</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">local_model</span><span class="p">)</span>
        
        <span class="c1"># Create global model
</span>        <span class="n">global_model</span> <span class="o">=</span> <span class="nf">federated_model_averaging</span><span class="p">(</span><span class="n">local_models</span><span class="p">)</span>
        
        <span class="c1"># Evaluate global model at each center
</span>        <span class="k">for</span> <span class="n">center</span> <span class="ow">in</span> <span class="n">medical_centers</span><span class="p">:</span>
            <span class="n">metrics</span> <span class="o">=</span> <span class="n">center</span><span class="p">.</span><span class="nf">evaluate_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Medical Center </span><span class="si">{</span><span class="n">center</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> - AUC: </span><span class="si">{</span><span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">auc</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">global_model</span>

<span class="c1"># Feature importance analysis
</span><span class="k">def</span> <span class="nf">analyze_feature_importance</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">feature_names</span><span class="p">):</span>
    <span class="n">importances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">tree</span><span class="p">.</span><span class="n">feature_importances_</span> 
                           <span class="k">for</span> <span class="n">tree</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">estimators_</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">feature_imp</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">feature</span><span class="sh">'</span><span class="p">:</span> <span class="n">feature_names</span><span class="p">,</span> <span class="sh">'</span><span class="s">importance</span><span class="sh">'</span><span class="p">:</span> <span class="n">importances</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">feature_imp</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="sh">'</span><span class="s">importance</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># Run the simulation
</span><span class="n">final_medical_model</span> <span class="o">=</span> <span class="nf">run_medical_federated_learning</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="3-privacy-preserving-patient-similarity-analysis">3. Privacy-Preserving Patient Similarity Analysis</h3>

<p>This example shows how to find similar patients across hospitals without sharing raw data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">scipy.spatial.distance</span> <span class="kn">import</span> <span class="n">cosine</span>
<span class="kn">import</span> <span class="n">hashlib</span>

<span class="k">class</span> <span class="nc">PrivatePatientSimilarity</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hospital_id</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="n">hospital_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">local_patients</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">add_patient</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">patient_id</span><span class="p">,</span> <span class="n">features</span><span class="p">):</span>
        <span class="c1"># Hash patient ID for privacy
</span>        <span class="n">hashed_id</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">sha256</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">patient_id</span><span class="p">).</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">hexdigest</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">local_patients</span><span class="p">[</span><span class="n">hashed_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">features</span>
    
    <span class="k">def</span> <span class="nf">generate_similarity_matrix</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">patient_ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">local_patients</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
        <span class="n">n_patients</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">patient_ids</span><span class="p">)</span>
        <span class="n">similarity_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">n_patients</span><span class="p">,</span> <span class="n">n_patients</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_patients</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_patients</span><span class="p">):</span>
                <span class="n">sim</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nf">cosine</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">local_patients</span><span class="p">[</span><span class="n">patient_ids</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span> 
                                <span class="n">self</span><span class="p">.</span><span class="n">local_patients</span><span class="p">[</span><span class="n">patient_ids</span><span class="p">[</span><span class="n">j</span><span class="p">]])</span>
                <span class="n">similarity_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sim</span>
                <span class="n">similarity_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sim</span>
        
        <span class="k">return</span> <span class="n">similarity_matrix</span><span class="p">,</span> <span class="n">patient_ids</span>
    
    <span class="k">def</span> <span class="nf">find_similar_patients</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">query_features</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">similarities</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">patient_id</span><span class="p">,</span> <span class="n">features</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">local_patients</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">sim</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nf">cosine</span><span class="p">(</span><span class="n">query_features</span><span class="p">,</span> <span class="n">features</span><span class="p">)</span>
            <span class="n">similarities</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">patient_id</span><span class="p">,</span> <span class="n">sim</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">similarities</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[:</span><span class="n">top_k</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">FederatedPatientSimilarity</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hospitals</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">hospitals</span> <span class="o">=</span> <span class="n">hospitals</span>
    
    <span class="k">def</span> <span class="nf">find_similar_patients_federated</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">query_features</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">all_similarities</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">hospital</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">hospitals</span><span class="p">:</span>
            <span class="n">local_similarities</span> <span class="o">=</span> <span class="n">hospital</span><span class="p">.</span><span class="nf">find_similar_patients</span><span class="p">(</span><span class="n">query_features</span><span class="p">,</span> <span class="n">top_k</span><span class="p">)</span>
            <span class="n">all_similarities</span><span class="p">.</span><span class="nf">extend</span><span class="p">([(</span><span class="n">hospital</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="o">*</span><span class="n">sim</span><span class="p">)</span> <span class="k">for</span> <span class="n">sim</span> <span class="ow">in</span> <span class="n">local_similarities</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">all_similarities</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[:</span><span class="n">top_k</span><span class="p">]</span>

<span class="c1"># Example usage
</span><span class="k">def</span> <span class="nf">simulate_patient_similarity</span><span class="p">():</span>
    <span class="c1"># Create hospitals with simulated patient data
</span>    <span class="n">hospitals</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nc">PrivatePatientSimilarity</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Hospital_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span> 
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="p">]</span>
    
    <span class="c1"># Add simulated patients to each hospital
</span>    <span class="k">for</span> <span class="n">hospital</span> <span class="ow">in</span> <span class="n">hospitals</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
            <span class="n">patient_features</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>  <span class="c1"># 50 medical features
</span>            <span class="n">hospital</span><span class="p">.</span><span class="nf">add_patient</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Patient_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">patient_features</span><span class="p">)</span>
    
    <span class="c1"># Create federated system
</span>    <span class="n">federated_system</span> <span class="o">=</span> <span class="nc">FederatedPatientSimilarity</span><span class="p">(</span><span class="n">hospitals</span><span class="p">)</span>
    
    <span class="c1"># Query similar patients
</span>    <span class="n">query_features</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>  <span class="c1"># New patient features
</span>    <span class="n">similar_patients</span> <span class="o">=</span> <span class="n">federated_system</span><span class="p">.</span><span class="nf">find_similar_patients_federated</span><span class="p">(</span><span class="n">query_features</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">similar_patients</span>

<span class="c1"># Run simulation
</span><span class="n">similar_patients</span> <span class="o">=</span> <span class="nf">simulate_patient_similarity</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Most similar patients across all hospitals:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">hospital_id</span><span class="p">,</span> <span class="n">patient_id</span><span class="p">,</span> <span class="n">similarity</span> <span class="ow">in</span> <span class="n">similar_patients</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Hospital: </span><span class="si">{</span><span class="n">hospital_id</span><span class="si">}</span><span class="s">, Patient: </span><span class="si">{</span><span class="n">patient_id</span><span class="si">}</span><span class="s">, Similarity: </span><span class="si">{</span><span class="n">similarity</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="practical-considerations-for-medical-federated-learning">Practical Considerations for Medical Federated Learning</h2>

<h3 id="1-data-standardization">1. Data Standardization</h3>

<p>Different hospitals may use different scales or units. Here’s how to handle it:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DataStandardizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">update_ranges</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hospital_data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">hospital_data</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">feature</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">-inf</span><span class="sh">'</span><span class="p">)}</span>
            
            <span class="n">local_min</span> <span class="o">=</span> <span class="n">hospital_data</span><span class="p">[</span><span class="n">feature</span><span class="p">].</span><span class="nf">min</span><span class="p">()</span>
            <span class="n">local_max</span> <span class="o">=</span> <span class="n">hospital_data</span><span class="p">[</span><span class="n">feature</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span>
            
            <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">[</span><span class="n">feature</span><span class="p">][</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">[</span><span class="n">feature</span><span class="p">][</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">],</span> <span class="n">local_min</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">[</span><span class="n">feature</span><span class="p">][</span><span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span><span class="p">[</span><span class="n">feature</span><span class="p">][</span><span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">],</span> <span class="n">local_max</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_standardization_params</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">feature_ranges</span>

<span class="k">class</span> <span class="nc">Hospital</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">standardize_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">standardizer_params</span><span class="p">):</span>
        <span class="n">standardized_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">feature</span><span class="p">,</span> <span class="n">range_info</span> <span class="ow">in</span> <span class="n">standardizer_params</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">standardized_data</span><span class="p">:</span>
                <span class="n">min_val</span> <span class="o">=</span> <span class="n">range_info</span><span class="p">[</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">]</span>
                <span class="n">max_val</span> <span class="o">=</span> <span class="n">range_info</span><span class="p">[</span><span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">]</span>
                <span class="n">standardized_data</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">standardized_data</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">-</span> <span class="n">min_val</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">max_val</span> <span class="o">-</span> <span class="n">min_val</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">standardized_data</span>
</code></pre></div></div>

<h3 id="2-handling-missing-data">2. Handling Missing Data</h3>

<p>Medical data often has missing values. Here’s a robust approach:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MissingDataHandler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">imputation_values</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">calculate_imputation_values</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hospitals</span><span class="p">):</span>
        <span class="n">all_values</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">hospital</span> <span class="ow">in</span> <span class="n">hospitals</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">hospital</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">column</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">all_values</span><span class="p">:</span>
                    <span class="n">all_values</span><span class="p">[</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">all_values</span><span class="p">[</span><span class="n">column</span><span class="p">].</span><span class="nf">extend</span><span class="p">(</span><span class="n">hospital</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">column</span><span class="p">].</span><span class="nf">dropna</span><span class="p">().</span><span class="nf">tolist</span><span class="p">())</span>
        
        <span class="k">for</span> <span class="n">column</span><span class="p">,</span> <span class="n">values</span> <span class="ow">in</span> <span class="n">all_values</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">)):</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">imputation_values</span><span class="p">[</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">median</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">imputation_values</span><span class="p">[</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">values</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="n">values</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">impute_missing_values</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">imputed_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">column</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">imputation_values</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">imputed_data</span><span class="p">:</span>
                <span class="n">imputed_data</span><span class="p">[</span><span class="n">column</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">imputed_data</span>
</code></pre></div></div>

<h3 id="3-model-evaluation-metrics-for-medical-data">3. Model Evaluation Metrics for Medical Data</h3>

<p>```python
class MedicalModelEvaluator:
    @staticmethod
    def calculate_metrics(y_true, y_pred_proba):
        thresholds = np.arange(0, 1.1, 0.1)
        metrics = []</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    for threshold in thresholds:
        y_pred = (y_pred_proba &gt;= threshold).astype(int)
        
        TP = np.sum((y_true == 1) &amp; (y_pred == 1))
        TN = np.sum((y_true == 0) &amp;
</code></pre></div></div>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Federated Learning in Healthcare: A Practical Guide]]></summary></entry><entry><title type="html">Federated Learning: Training AI Without Sharing Your Data</title><link href="http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog.html" rel="alternate" type="text/html" title="Federated Learning: Training AI Without Sharing Your Data" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/federated-learning-blog.html"><![CDATA[<h1 id="federated-learning-training-ai-without-sharing-your-data">Federated Learning: Training AI Without Sharing Your Data</h1>

<h2 id="what-is-federated-learning">What is Federated Learning?</h2>

<p>Imagine you’re trying to build a smart keyboard that predicts the next word you’ll type. But there’s a catch - you can’t peek at anyone’s private messages. That’s where federated learning comes in. Instead of sending all the data to a central server, the AI model travels to each device, learns locally, and only shares the lessons learned, not the actual data.</p>

<h2 id="why-is-it-revolutionary">Why is it Revolutionary?</h2>

<ol>
  <li><strong>Privacy</strong>: Your data never leaves your device</li>
  <li><strong>Efficiency</strong>: Leverages millions of devices for training</li>
  <li><strong>Personalization</strong>: Models can adapt to local usage patterns</li>
</ol>

<h2 id="how-does-it-work-a-simple-example">How Does it Work? A Simple Example</h2>

<p>Let’s break it down with Python code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">SGDClassifier</span>

<span class="k">class</span> <span class="nc">Device</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">local_data</span><span class="p">,</span> <span class="n">local_labels</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">local_data</span>
        <span class="n">self</span><span class="p">.</span><span class="n">labels</span> <span class="o">=</span> <span class="n">local_labels</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">global_model</span><span class="p">):</span>
        <span class="c1"># Copy global model parameters
</span>        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
        <span class="c1"># Train on local data
</span>        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">partial_fit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">labels</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">get_model_params</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">model</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">new_model</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">new_model</span><span class="p">.</span><span class="n">coef_</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">coef_</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">new_model</span><span class="p">.</span><span class="n">intercept_</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">intercept_</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">new_model</span>

<span class="k">def</span> <span class="nf">get_model_params</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">coef</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">.</span><span class="n">coef_</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> 
            <span class="sh">"</span><span class="s">intercept</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">.</span><span class="n">intercept_</span><span class="p">.</span><span class="nf">copy</span><span class="p">()}</span>

<span class="k">def</span> <span class="nf">aggregate_models</span><span class="p">(</span><span class="n">model_params_list</span><span class="p">):</span>
    <span class="c1"># Average the parameters from all devices
</span>    <span class="n">avg_coef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">params</span><span class="p">[</span><span class="sh">"</span><span class="s">coef</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">model_params_list</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">avg_intercept</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">params</span><span class="p">[</span><span class="sh">"</span><span class="s">intercept</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">model_params_list</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">global_model</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">coef_</span> <span class="o">=</span> <span class="n">avg_coef</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">intercept_</span> <span class="o">=</span> <span class="n">avg_intercept</span>
    <span class="k">return</span> <span class="n">global_model</span>

<span class="c1"># Simulate federated learning
</span><span class="k">def</span> <span class="nf">run_federated_learning</span><span class="p">():</span>
    <span class="c1"># Create simulated devices with local data
</span>    <span class="n">devices</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nc">Device</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">)),</span>
        <span class="nc">Device</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">)),</span>
        <span class="nc">Device</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">))</span>
    <span class="p">]</span>
    
    <span class="n">global_model</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">for</span> <span class="nb">round</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>  <span class="c1"># 5 rounds of training
</span>        <span class="n">local_models</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># Train on each device
</span>        <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">:</span>
            <span class="n">local_params</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="nf">train_local_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
            <span class="n">local_models</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">local_params</span><span class="p">)</span>
        
        <span class="c1"># Aggregate models
</span>        <span class="n">global_model</span> <span class="o">=</span> <span class="nf">aggregate_models</span><span class="p">(</span><span class="n">local_models</span><span class="p">)</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Round </span><span class="si">{</span><span class="nb">round</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s"> completed</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">global_model</span>

<span class="c1"># Run the simulation
</span><span class="n">final_model</span> <span class="o">=</span> <span class="nf">run_federated_learning</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="real-world-applications">Real-World Applications</h2>

<h3 id="1-next-word-prediction">1. Next Word Prediction</h3>
<p>Google’s Gboard uses federated learning to improve keyboard predictions:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">KeyboardDevice</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">user_texts</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">texts</span> <span class="o">=</span> <span class="n">user_texts</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vocab</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">texts</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">vocab</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="k">if</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">vocab</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">vocab</span><span class="p">,</span> <span class="sh">"</span><span class="s">bigrams</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">bigrams</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">aggregate_keyboard_models</span><span class="p">(</span><span class="n">local_models</span><span class="p">):</span>
    <span class="n">global_vocab</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">global_bigrams</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">for</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">local_models</span><span class="p">:</span>
        <span class="n">global_vocab</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">model</span><span class="p">[</span><span class="sh">"</span><span class="s">vocab</span><span class="sh">"</span><span class="p">])</span>
        
        <span class="k">for</span> <span class="n">word1</span><span class="p">,</span> <span class="n">next_words</span> <span class="ow">in</span> <span class="n">model</span><span class="p">[</span><span class="sh">"</span><span class="s">bigrams</span><span class="sh">"</span><span class="p">].</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">word1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">global_bigrams</span><span class="p">:</span>
                <span class="n">global_bigrams</span><span class="p">[</span><span class="n">word1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">word2</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">next_words</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">word2</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">global_bigrams</span><span class="p">[</span><span class="n">word1</span><span class="p">]:</span>
                    <span class="n">global_bigrams</span><span class="p">[</span><span class="n">word1</span><span class="p">][</span><span class="n">word2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">global_bigrams</span><span class="p">[</span><span class="n">word1</span><span class="p">][</span><span class="n">word2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">count</span>
    
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">vocab</span><span class="sh">"</span><span class="p">:</span> <span class="n">global_vocab</span><span class="p">,</span> <span class="sh">"</span><span class="s">bigrams</span><span class="sh">"</span><span class="p">:</span> <span class="n">global_bigrams</span><span class="p">}</span>

<span class="c1"># Example usage
</span><span class="n">devices</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">KeyboardDevice</span><span class="p">([</span><span class="sh">"</span><span class="s">hello world</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">hello there</span><span class="sh">"</span><span class="p">]),</span>
    <span class="nc">KeyboardDevice</span><span class="p">([</span><span class="sh">"</span><span class="s">world news</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">hello friend</span><span class="sh">"</span><span class="p">]),</span>
    <span class="nc">KeyboardDevice</span><span class="p">([</span><span class="sh">"</span><span class="s">my friend</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">hello world</span><span class="sh">"</span><span class="p">])</span>
<span class="p">]</span>

<span class="n">local_models</span> <span class="o">=</span> <span class="p">[</span><span class="n">device</span><span class="p">.</span><span class="nf">train_local_model</span><span class="p">()</span> <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">]</span>
<span class="n">global_model</span> <span class="o">=</span> <span class="nf">aggregate_keyboard_models</span><span class="p">(</span><span class="n">local_models</span><span class="p">)</span>

<span class="c1"># Predict next word
</span><span class="k">def</span> <span class="nf">predict_next_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">model</span><span class="p">[</span><span class="sh">"</span><span class="s">bigrams</span><span class="sh">"</span><span class="p">]:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="n">next_words</span> <span class="o">=</span> <span class="n">model</span><span class="p">[</span><span class="sh">"</span><span class="s">bigrams</span><span class="sh">"</span><span class="p">][</span><span class="n">word</span><span class="p">]</span>
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">next_words</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">predict_next_word</span><span class="p">(</span><span class="sh">"</span><span class="s">hello</span><span class="sh">"</span><span class="p">,</span> <span class="n">global_model</span><span class="p">))</span>  <span class="c1"># Might print "world"
</span></code></pre></div></div>

<h3 id="2-healthcare-analytics">2. Healthcare Analytics</h3>
<p>Hospitals can collaborate without sharing patient data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Hospital</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">patient_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">patient_data</span>
        
    <span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">global_model</span><span class="p">):</span>
        <span class="c1"># Train a model on local patient data
</span>        <span class="n">local_model</span> <span class="o">=</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
        <span class="n">local_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">features</span><span class="sh">"</span><span class="p">],</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">labels</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">return</span> <span class="nf">get_model_params</span><span class="p">(</span><span class="n">local_model</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">hospital1</span> <span class="o">=</span> <span class="nc">Hospital</span><span class="p">({</span>
    <span class="sh">"</span><span class="s">features</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">labels</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">hospital2</span> <span class="o">=</span> <span class="nc">Hospital</span><span class="p">({</span>
    <span class="sh">"</span><span class="s">features</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">labels</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="challenges-and-solutions">Challenges and Solutions</h2>

<h3 id="1-communication-overhead">1. Communication Overhead</h3>
<p>Problem: Sending model updates can be bandwidth-intensive</p>

<p>Solution: Model compression</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compress_model_update</span><span class="p">(</span><span class="n">model_params</span><span class="p">):</span>
    <span class="n">compressed</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">coef</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nf">around</span><span class="p">(</span><span class="n">model_params</span><span class="p">[</span><span class="sh">"</span><span class="s">coef</span><span class="sh">"</span><span class="p">],</span> <span class="n">decimals</span><span class="o">=</span><span class="mi">4</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">intercept</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nf">around</span><span class="p">(</span><span class="n">model_params</span><span class="p">[</span><span class="sh">"</span><span class="s">intercept</span><span class="sh">"</span><span class="p">],</span> <span class="n">decimals</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">compressed</span>

<span class="c1"># Usage in device training
</span><span class="k">def</span> <span class="nf">train_local_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">global_model</span><span class="p">):</span>
    <span class="n">local_model</span> <span class="o">=</span> <span class="nf">clone_model</span><span class="p">(</span><span class="n">global_model</span><span class="p">)</span>
    <span class="n">local_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">labels</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">compress_model_update</span><span class="p">(</span><span class="nf">get_model_params</span><span class="p">(</span><span class="n">local_model</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="2-non-iid-data">2. Non-IID Data</h3>
<p>Problem: Different devices may have very different data distributions</p>

<p>Solution: Federated averaging with weighted updates</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">weighted_aggregate_models</span><span class="p">(</span><span class="n">model_params_list</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>
    <span class="n">avg_coef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">average</span><span class="p">([</span><span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">coef</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">model_params_list</span><span class="p">],</span> 
                          <span class="n">weights</span><span class="o">=</span><span class="n">weights</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">avg_intercept</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">average</span><span class="p">([</span><span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">intercept</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">model_params_list</span><span class="p">],</span> 
                               <span class="n">weights</span><span class="o">=</span><span class="n">weights</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">global_model</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">coef_</span> <span class="o">=</span> <span class="n">avg_coef</span>
    <span class="n">global_model</span><span class="p">.</span><span class="n">intercept_</span> <span class="o">=</span> <span class="n">avg_intercept</span>
    <span class="k">return</span> <span class="n">global_model</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Regular Communication Rounds</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">training_schedule</span><span class="p">(</span><span class="n">num_rounds</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_devices</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
 <span class="n">available_devices</span> <span class="o">=</span> <span class="nf">get_available_devices</span><span class="p">()</span>
 <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">available_devices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_devices</span><span class="p">:</span>
     <span class="k">return</span> <span class="bp">False</span>
    
 <span class="k">for</span> <span class="nb">round</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_rounds</span><span class="p">):</span>
     <span class="n">selected_devices</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="n">available_devices</span><span class="p">,</span> <span class="n">min_devices</span><span class="p">)</span>
     <span class="nf">train_round</span><span class="p">(</span><span class="n">selected_devices</span><span class="p">)</span>
 <span class="k">return</span> <span class="bp">True</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Secure Aggregation</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">secure_aggregate</span><span class="p">(</span><span class="n">model_updates</span><span class="p">):</span>
 <span class="c1"># Simplified secure aggregation
</span> <span class="n">noise_scale</span> <span class="o">=</span> <span class="mf">0.01</span>
 <span class="n">secure_updates</span> <span class="o">=</span> <span class="p">[]</span>
    
 <span class="k">for</span> <span class="n">update</span> <span class="ow">in</span> <span class="n">model_updates</span><span class="p">:</span>
     <span class="n">noisy_update</span> <span class="o">=</span> <span class="p">{</span>
         <span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">noise_scale</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
         <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">update</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span>
     <span class="p">}</span>
     <span class="n">secure_updates</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">noisy_update</span><span class="p">)</span>
    
 <span class="k">return</span> <span class="nf">aggregate_models</span><span class="p">(</span><span class="n">secure_updates</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="tools-and-frameworks">Tools and Frameworks</h2>

<ol>
  <li><strong>TensorFlow Federated</strong>
```python
import tensorflow_federated as tff</li>
</ol>

<h1 id="define-a-simple-model">Define a simple model</h1>
<p>def create_keras_model():
    return tf.keras.models.Sequential([
        tf.keras.layers.Dense(10, activation=tf.nn.relu),
        tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)
    ])</p>

<h1 id="create-a-federated-training-process">Create a federated training process</h1>
<p>def model_fn():
    keras_model = create_keras_model()
    return tff.learning.from_keras_model(
        keras_model,
        input_spec=train_data[0].element_spec,
        loss=tf.keras.losses.BinaryCrossentropy(),
        metrics=[tf.keras.metrics.BinaryAccuracy()]
    )</p>

<p>federated_algorithm = tff.learning.build_federated_averaging_process(
    model_fn,
    client_optimizer_fn=lambda: tf.keras.optimizers.SGD(0.1)
)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
2. **PySyft**
```python
import syft as sy

hook = sy.TorchHook(torch)
bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")

# Create and send data to virtual workers
data = torch.tensor([1, 2, 3, 4, 5])
bob_data = data.send(bob)
alice_data = data.send(alice)

# Perform federated computation
aggregated_data = (bob_data + alice_data).get()
</code></pre></div></div>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Federated Learning: Training AI Without Sharing Your Data]]></summary></entry><entry><title type="html">Network Traffic Analysis with Python: A Practical Guide</title><link href="http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide-(1).html" rel="alternate" type="text/html" title="Network Traffic Analysis with Python: A Practical Guide" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide%20(1)</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide-(1).html"><![CDATA[<h1 id="network-traffic-analysis-with-python-a-practical-guide">Network Traffic Analysis with Python: A Practical Guide</h1>

<h2 id="introduction">Introduction</h2>
<p>Network traffic analysis is crucial for:</p>
<ul>
  <li>Detecting security threats</li>
  <li>Optimizing network performance</li>
  <li>Understanding user behavior</li>
</ul>

<p>In this guide, we’ll explore practical approaches to analyze network traffic using Python.</p>

<h2 id="1-basic-packet-capture-and-analysis">1. Basic Packet Capture and Analysis</h2>

<p>First, let’s capture and analyze network packets:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scapy.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="k">class</span> <span class="nc">NetworkAnalyzer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">packets</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">capture_packets</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Capturing packets for </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">packets</span> <span class="o">=</span> <span class="nf">sniff</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">packets</span> <span class="o">=</span> <span class="n">packets</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">packets</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">analyze_basic_stats</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">protocols</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="n">ip_sources</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="n">ip_destinations</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">packets</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">IP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                <span class="n">protocols</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">proto</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ip_sources</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ip_destinations</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">protocol_stats</span><span class="sh">'</span><span class="p">:</span> <span class="n">protocols</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">source_ips</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip_sources</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">dest_ips</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip_destinations</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">extract_flow_features</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">flows</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">packets</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">IP</span> <span class="ow">in</span> <span class="n">packet</span> <span class="ow">and</span> <span class="p">(</span><span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span> <span class="ow">or</span> <span class="n">UDP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                    <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">sport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">dport</span>
                    <span class="n">flags</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">flags</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">UDP</span><span class="p">].</span><span class="n">sport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">UDP</span><span class="p">].</span><span class="n">dport</span>
                    <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span>
                
                <span class="n">flow_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span><span class="p">,</span> <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">proto</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="n">flow_tuple</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">flows</span><span class="p">:</span>
                    <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">:</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">:</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">flags</span><span class="sh">'</span><span class="p">:</span> <span class="nf">set</span><span class="p">()</span>
                    <span class="p">}</span>
                
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">+=</span> <span class="nf">len</span><span class="p">(</span><span class="n">packet</span><span class="p">)</span>
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span>
                <span class="k">if</span> <span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                    <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">flags</span><span class="sh">'</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span>
        
        <span class="c1"># Convert flows to feature vectors
</span>        <span class="n">flow_features</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">flow_tuple</span><span class="p">,</span> <span class="n">flow_data</span> <span class="ow">in</span> <span class="n">flows</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">duration</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">feature_vector</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">dst_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">src_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">duration</span> <span class="k">if</span> <span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">duration</span> <span class="k">if</span> <span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span>
            <span class="p">}</span>
            <span class="n">flow_features</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">flow_features</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">num_packets</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Captured </span><span class="si">{</span><span class="n">num_packets</span><span class="si">}</span><span class="s"> packets</span><span class="sh">"</span><span class="p">)</span>

<span class="n">basic_stats</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">analyze_basic_stats</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Protocol Statistics:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">basic_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">protocol_stats</span><span class="sh">'</span><span class="p">].</span><span class="nf">most_common</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Protocol </span><span class="si">{</span><span class="n">proto</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s"> packets</span><span class="sh">"</span><span class="p">)</span>

<span class="n">flow_features</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Flow Features:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flow_features</span><span class="p">.</span><span class="nf">describe</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="2-machine-learning-for-traffic-classification">2. Machine Learning for Traffic Classification</h2>

<p>Now let’s use ML to classify network traffic:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>
<span class="kn">import</span> <span class="n">joblib</span>

<span class="k">class</span> <span class="nc">TrafficClassifier</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">prepare_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="c1"># Assuming we have some labeled data
</span>        <span class="c1"># In reality, you'd need to label your flows (e.g., normal, attack, etc.)
</span>        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_label_flow</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_label_flow</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow</span><span class="p">):</span>
        <span class="c1"># This is a simplified labeling function
</span>        <span class="c1"># In reality, you'd need more sophisticated rules or manual labeling
</span>        <span class="k">if</span> <span class="n">flow</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1000000</span><span class="p">:</span>  <span class="c1"># 1 MB/s
</span>            <span class="k">return</span> <span class="sh">'</span><span class="s">high_traffic</span><span class="sh">'</span>
        <span class="k">elif</span> <span class="n">flow</span><span class="p">[</span><span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">]</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">443</span><span class="p">]:</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">web_traffic</span><span class="sh">'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">other</span><span class="sh">'</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">):</span>
        <span class="n">X_train_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_scaled</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">):</span>
        <span class="n">X_test_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
        <span class="n">y_pred</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_scaled</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">save_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="n">joblib</span><span class="p">.</span><span class="nf">dump</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">),</span> <span class="n">filename</span><span class="p">)</span>
    
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">load_model</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="n">classifier</span> <span class="o">=</span> <span class="nf">cls</span><span class="p">()</span>
        <span class="n">classifier</span><span class="p">.</span><span class="n">scaler</span><span class="p">,</span> <span class="n">classifier</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">joblib</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">classifier</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">flow_data</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>

<span class="n">classifier</span> <span class="o">=</span> <span class="nc">TrafficClassifier</span><span class="p">()</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="nf">prepare_data</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>

<span class="n">classifier</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">evaluation_report</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Traffic Classification Report:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">evaluation_report</span><span class="p">)</span>

<span class="c1"># Save the model for future use
</span><span class="n">classifier</span><span class="p">.</span><span class="nf">save_model</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_classifier.joblib</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="3-anomaly-detection-in-network-traffic">3. Anomaly Detection in Network Traffic</h2>

<p>Let’s implement anomaly detection to find unusual network behavior:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">IsolationForest</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">class</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">IsolationForest</span><span class="p">(</span><span class="n">contamination</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">predictions</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
        
        <span class="c1"># -1 indicates anomaly, 1 indicates normal
</span>        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">]]</span>
    
    <span class="k">def</span> <span class="nf">calculate_anomaly_scores</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">scores</span>

<span class="k">class</span> <span class="nc">RealTimeTrafficMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">analyzer</span><span class="p">,</span> <span class="n">classifier</span><span class="p">,</span> <span class="n">anomaly_detector</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span> <span class="o">=</span> <span class="n">analyzer</span>
        <span class="n">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">classifier</span>
        <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span> <span class="o">=</span> <span class="n">anomaly_detector</span>
        <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">establish_baseline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">300</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Establishing baseline over </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">flow_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">avg_bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">avg_packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">std_bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">std_packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span>
    
    <span class="k">def</span> <span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Monitoring traffic for </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">flow_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
        
        <span class="c1"># Classify traffic
</span>        <span class="n">classifications</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">])</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">classification</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">classifications</span>
        
        <span class="c1"># Detect anomalies
</span>        <span class="n">anomalies</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="n">anomaly_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">calculate_anomaly_scores</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">anomaly_scores</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">flow_data</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">:</span> <span class="n">anomalies</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">'</span><span class="s">total_flows</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">flow_data</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">anomaly_flows</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">anomalies</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">traffic_types</span><span class="sh">'</span><span class="p">:</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">classifications</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">classifier</span> <span class="o">=</span> <span class="n">TrafficClassifier</span><span class="p">.</span><span class="nf">load_model</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_classifier.joblib</span><span class="sh">'</span><span class="p">)</span>
<span class="n">anomaly_detector</span> <span class="o">=</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">()</span>

<span class="n">monitor</span> <span class="o">=</span> <span class="nc">RealTimeTrafficMonitor</span><span class="p">(</span><span class="n">analyzer</span><span class="p">,</span> <span class="n">classifier</span><span class="p">,</span> <span class="n">anomaly_detector</span><span class="p">)</span>
<span class="n">baseline</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">establish_baseline</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">120</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Baseline Statistics:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">baseline</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">monitoring_result</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Monitoring Results:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total Flows: </span><span class="si">{</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">total_flows</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Anomalous Flows: </span><span class="si">{</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">anomaly_flows</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Traffic Types:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">traffic_type</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">traffic_types</span><span class="sh">'</span><span class="p">].</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">traffic_type</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s"> flows</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">].</span><span class="n">empty</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Top Anomalies:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">head</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="4-visualization-of-network-traffic">4. Visualization of Network Traffic</h2>

<p>Let’s create visualizations to help understand the traffic patterns:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="n">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>

<span class="k">class</span> <span class="nc">TrafficVisualizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">seaborn</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">plot_traffic_volume_over_time</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">],</span> <span class="n">unit</span><span class="o">=</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">hourly_traffic</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">).</span><span class="nf">resample</span><span class="p">(</span><span class="sh">'</span><span class="s">1min</span><span class="sh">'</span><span class="p">).</span><span class="nf">sum</span><span class="p">()</span>
        
        <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">hourly_traffic</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">hourly_traffic</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Network Traffic Volume Over Time</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_protocol_distribution</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">protocol_counts</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
        <span class="n">protocol_counts</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Protocol Distribution</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Protocol</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_anomaly_visualization</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">c</span><span class="o">=</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">viridis</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly Score</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Packets per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Network Flow Anomalies</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_3d_traffic_visualization</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
        <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">3d</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">scatter</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">c</span><span class="o">=</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">viridis</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Packets per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_zlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Packet Size</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">scatter</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly Score</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">3D Network Traffic Visualization</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">plt</span>

<span class="c1"># Example usage
</span><span class="n">visualizer</span> <span class="o">=</span> <span class="nc">TrafficVisualizer</span><span class="p">()</span>

<span class="c1"># Get monitoring results
</span><span class="n">monitoring_result</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">flow_data</span> <span class="o">=</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">flow_data</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># Create visualizations
</span><span class="n">volume_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_traffic_volume_over_time</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">volume_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_volume.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">protocol_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_protocol_distribution</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">protocol_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">protocol_distribution.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">anomaly_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_anomaly_visualization</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">anomaly_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">anomaly_visualization.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plot_3d</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_3d_traffic_visualization</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">plot_3d</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">3d_traffic_visualization.png</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="5-practical-considerations-and-best-practices">5. Practical Considerations and Best Practices</h2>

<ol>
  <li><strong>Performance Optimization</strong>
```python
    <h1 id="use-pyshark-for-better-performance-with-large-packet-captures">Use PyShark for better performance with large packet captures</h1>
    <p>import pyshark</p>
  </li>
</ol>

<p>def capture_with_pyshark(interface, duration):
    capture = pyshark.LiveCapture(interface=interface)
    capture.sniff(timeout=duration)
    return capture</p>

<h1 id="use-multiprocessing-for-faster-analysis">Use multiprocessing for faster analysis</h1>
<p>from multiprocessing import Pool</p>

<p>def analyze_packet_chunk(packets):
    # Analysis code here
    pass</p>

<p>def parallel_analysis(all_packets, num_processes=4):
    chunk_size =</p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Network Traffic Analysis with Python: A Practical Guide]]></summary></entry><entry><title type="html">Network Traffic Analysis with Python: A Practical Guide</title><link href="http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide.html" rel="alternate" type="text/html" title="Network Traffic Analysis with Python: A Practical Guide" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/network-analysis-guide.html"><![CDATA[<h1 id="network-traffic-analysis-with-python-a-practical-guide">Network Traffic Analysis with Python: A Practical Guide</h1>

<h2 id="introduction">Introduction</h2>
<p>Network traffic analysis is crucial for:</p>
<ul>
  <li>Detecting security threats</li>
  <li>Optimizing network performance</li>
  <li>Understanding user behavior</li>
</ul>

<p>In this guide, we’ll explore practical approaches to analyze network traffic using Python.</p>

<h2 id="1-basic-packet-capture-and-analysis">1. Basic Packet Capture and Analysis</h2>

<p>First, let’s capture and analyze network packets:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scapy.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="k">class</span> <span class="nc">NetworkAnalyzer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">packets</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">capture_packets</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Capturing packets for </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">packets</span> <span class="o">=</span> <span class="nf">sniff</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">packets</span> <span class="o">=</span> <span class="n">packets</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">packets</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">analyze_basic_stats</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">protocols</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="n">ip_sources</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="n">ip_destinations</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">packets</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">IP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                <span class="n">protocols</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">proto</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ip_sources</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ip_destinations</span><span class="p">[</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">protocol_stats</span><span class="sh">'</span><span class="p">:</span> <span class="n">protocols</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">source_ips</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip_sources</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">dest_ips</span><span class="sh">'</span><span class="p">:</span> <span class="n">ip_destinations</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">extract_flow_features</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">flows</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">packets</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">IP</span> <span class="ow">in</span> <span class="n">packet</span> <span class="ow">and</span> <span class="p">(</span><span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span> <span class="ow">or</span> <span class="n">UDP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                    <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">sport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">dport</span>
                    <span class="n">flags</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">TCP</span><span class="p">].</span><span class="n">flags</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span> <span class="o">=</span> <span class="n">packet</span><span class="p">[</span><span class="n">UDP</span><span class="p">].</span><span class="n">sport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">UDP</span><span class="p">].</span><span class="n">dport</span>
                    <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span>
                
                <span class="n">flow_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span><span class="p">,</span> <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">proto</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="n">flow_tuple</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">flows</span><span class="p">:</span>
                    <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">:</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">:</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">flags</span><span class="sh">'</span><span class="p">:</span> <span class="nf">set</span><span class="p">()</span>
                    <span class="p">}</span>
                
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">+=</span> <span class="nf">len</span><span class="p">(</span><span class="n">packet</span><span class="p">)</span>
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">packet</span><span class="p">.</span><span class="n">time</span>
                <span class="k">if</span> <span class="n">TCP</span> <span class="ow">in</span> <span class="n">packet</span><span class="p">:</span>
                    <span class="n">flows</span><span class="p">[</span><span class="n">flow_tuple</span><span class="p">][</span><span class="sh">'</span><span class="s">flags</span><span class="sh">'</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span>
        
        <span class="c1"># Convert flows to feature vectors
</span>        <span class="n">flow_features</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">flow_tuple</span><span class="p">,</span> <span class="n">flow_data</span> <span class="ow">in</span> <span class="n">flows</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">duration</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">end_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">feature_vector</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">'</span><span class="s">src_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">dst_ip</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">src_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_tuple</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">],</span>
                <span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">duration</span> <span class="k">if</span> <span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">duration</span> <span class="k">if</span> <span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">]</span>
            <span class="p">}</span>
            <span class="n">flow_features</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">flow_features</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">flow_data</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">num_packets</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Captured </span><span class="si">{</span><span class="n">num_packets</span><span class="si">}</span><span class="s"> packets</span><span class="sh">"</span><span class="p">)</span>

<span class="n">basic_stats</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">analyze_basic_stats</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Protocol Statistics:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">basic_stats</span><span class="p">[</span><span class="sh">'</span><span class="s">protocol_stats</span><span class="sh">'</span><span class="p">].</span><span class="nf">most_common</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Protocol </span><span class="si">{</span><span class="n">proto</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s"> packets</span><span class="sh">"</span><span class="p">)</span>

<span class="n">flow_features</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Flow Features:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flow_features</span><span class="p">.</span><span class="nf">describe</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="2-machine-learning-for-traffic-classification">2. Machine Learning for Traffic Classification</h2>

<p>Now let’s use ML to classify network traffic:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>
<span class="kn">import</span> <span class="n">joblib</span>

<span class="k">class</span> <span class="nc">TrafficClassifier</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">duration</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">prepare_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="c1"># Assuming we have some labeled data
</span>        <span class="c1"># In reality, you'd need to label your flows (e.g., normal, attack, etc.)
</span>        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_label_flow</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_label_flow</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow</span><span class="p">):</span>
        <span class="c1"># This is a simplified labeling function
</span>        <span class="c1"># In reality, you'd need more sophisticated rules or manual labeling
</span>        <span class="k">if</span> <span class="n">flow</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1000000</span><span class="p">:</span>  <span class="c1"># 1 MB/s
</span>            <span class="k">return</span> <span class="sh">'</span><span class="s">high_traffic</span><span class="sh">'</span>
        <span class="k">elif</span> <span class="n">flow</span><span class="p">[</span><span class="sh">'</span><span class="s">dst_port</span><span class="sh">'</span><span class="p">]</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">443</span><span class="p">]:</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">web_traffic</span><span class="sh">'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">other</span><span class="sh">'</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">):</span>
        <span class="n">X_train_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_scaled</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">):</span>
        <span class="n">X_test_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
        <span class="n">y_pred</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_scaled</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">save_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="n">joblib</span><span class="p">.</span><span class="nf">dump</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">),</span> <span class="n">filename</span><span class="p">)</span>
    
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">load_model</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="n">classifier</span> <span class="o">=</span> <span class="nf">cls</span><span class="p">()</span>
        <span class="n">classifier</span><span class="p">.</span><span class="n">scaler</span><span class="p">,</span> <span class="n">classifier</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">joblib</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">classifier</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">flow_data</span> <span class="o">=</span> <span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>

<span class="n">classifier</span> <span class="o">=</span> <span class="nc">TrafficClassifier</span><span class="p">()</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="nf">prepare_data</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>

<span class="n">classifier</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">evaluation_report</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Traffic Classification Report:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">evaluation_report</span><span class="p">)</span>

<span class="c1"># Save the model for future use
</span><span class="n">classifier</span><span class="p">.</span><span class="nf">save_model</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_classifier.joblib</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="3-anomaly-detection-in-network-traffic">3. Anomaly Detection in Network Traffic</h2>

<p>Let’s implement anomaly detection to find unusual network behavior:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">IsolationForest</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">class</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">IsolationForest</span><span class="p">(</span><span class="n">contamination</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">,</span> 
                               <span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">predictions</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
        
        <span class="c1"># -1 indicates anomaly, 1 indicates normal
</span>        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">is_anomaly</span><span class="sh">'</span><span class="p">]]</span>
    
    <span class="k">def</span> <span class="nf">calculate_anomaly_scores</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">]</span>
        <span class="n">X_scaled</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">score_samples</span><span class="p">(</span><span class="n">X_scaled</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">scores</span>

<span class="k">class</span> <span class="nc">RealTimeTrafficMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">analyzer</span><span class="p">,</span> <span class="n">classifier</span><span class="p">,</span> <span class="n">anomaly_detector</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span> <span class="o">=</span> <span class="n">analyzer</span>
        <span class="n">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">classifier</span>
        <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span> <span class="o">=</span> <span class="n">anomaly_detector</span>
        <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">establish_baseline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">300</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Establishing baseline over </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">flow_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">avg_bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">avg_packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">std_bytes_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">std_packets_per_second</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">baseline_stats</span>
    
    <span class="k">def</span> <span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Monitoring traffic for </span><span class="si">{</span><span class="n">duration</span><span class="si">}</span><span class="s"> seconds...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">capture_packets</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
        <span class="n">flow_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">extract_flow_features</span><span class="p">()</span>
        
        <span class="c1"># Classify traffic
</span>        <span class="n">classifications</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">.</span><span class="n">feature_columns</span><span class="p">])</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">classification</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">classifications</span>
        
        <span class="c1"># Detect anomalies
</span>        <span class="n">anomalies</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">detect_anomalies</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="n">anomaly_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">anomaly_detector</span><span class="p">.</span><span class="nf">calculate_anomaly_scores</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">anomaly_scores</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">flow_data</span><span class="sh">'</span><span class="p">:</span> <span class="n">flow_data</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">:</span> <span class="n">anomalies</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">'</span><span class="s">total_flows</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">flow_data</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">anomaly_flows</span><span class="sh">'</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">anomalies</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">traffic_types</span><span class="sh">'</span><span class="p">:</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">classifications</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="c1"># Example usage
</span><span class="n">analyzer</span> <span class="o">=</span> <span class="nc">NetworkAnalyzer</span><span class="p">()</span>
<span class="n">classifier</span> <span class="o">=</span> <span class="n">TrafficClassifier</span><span class="p">.</span><span class="nf">load_model</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_classifier.joblib</span><span class="sh">'</span><span class="p">)</span>
<span class="n">anomaly_detector</span> <span class="o">=</span> <span class="nc">NetworkAnomalyDetector</span><span class="p">()</span>

<span class="n">monitor</span> <span class="o">=</span> <span class="nc">RealTimeTrafficMonitor</span><span class="p">(</span><span class="n">analyzer</span><span class="p">,</span> <span class="n">classifier</span><span class="p">,</span> <span class="n">anomaly_detector</span><span class="p">)</span>
<span class="n">baseline</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">establish_baseline</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">120</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Baseline Statistics:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">baseline</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">monitoring_result</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Monitoring Results:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total Flows: </span><span class="si">{</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">total_flows</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Anomalous Flows: </span><span class="si">{</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">anomaly_flows</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Traffic Types:</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">traffic_type</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">traffic_types</span><span class="sh">'</span><span class="p">].</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">traffic_type</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s"> flows</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">].</span><span class="n">empty</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Top Anomalies:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">anomalies</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">head</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="4-visualization-of-network-traffic">4. Visualization of Network Traffic</h2>

<p>Let’s create visualizations to help understand the traffic patterns:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="n">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>

<span class="k">class</span> <span class="nc">TrafficVisualizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">seaborn</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">plot_traffic_volume_over_time</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">start_time</span><span class="sh">'</span><span class="p">],</span> <span class="n">unit</span><span class="o">=</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">hourly_traffic</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">).</span><span class="nf">resample</span><span class="p">(</span><span class="sh">'</span><span class="s">1min</span><span class="sh">'</span><span class="p">).</span><span class="nf">sum</span><span class="p">()</span>
        
        <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">hourly_traffic</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">hourly_traffic</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Network Traffic Volume Over Time</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_protocol_distribution</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">protocol_counts</span> <span class="o">=</span> <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">protocol</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
        <span class="n">protocol_counts</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Protocol Distribution</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Protocol</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_anomaly_visualization</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">c</span><span class="o">=</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">],</span> 
                   <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">viridis</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly Score</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Packets per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Network Flow Anomalies</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">plt</span>
    
    <span class="k">def</span> <span class="nf">plot_3d_traffic_visualization</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flow_data</span><span class="p">):</span>
        <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
        <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">3d</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">scatter</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">bytes_per_second</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">packets_per_second</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">avg_packet_size</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">c</span><span class="o">=</span><span class="n">flow_data</span><span class="p">[</span><span class="sh">'</span><span class="s">anomaly_score</span><span class="sh">'</span><span class="p">],</span>
                            <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">viridis</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Bytes per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Packets per Second</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="nf">set_zlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Packet Size</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">scatter</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly Score</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">3D Network Traffic Visualization</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">plt</span>

<span class="c1"># Example usage
</span><span class="n">visualizer</span> <span class="o">=</span> <span class="nc">TrafficVisualizer</span><span class="p">()</span>

<span class="c1"># Get monitoring results
</span><span class="n">monitoring_result</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="nf">monitor_traffic</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">flow_data</span> <span class="o">=</span> <span class="n">monitoring_result</span><span class="p">[</span><span class="sh">'</span><span class="s">flow_data</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># Create visualizations
</span><span class="n">volume_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_traffic_volume_over_time</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">volume_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">traffic_volume.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">protocol_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_protocol_distribution</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">protocol_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">protocol_distribution.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">anomaly_plot</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_anomaly_visualization</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">anomaly_plot</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">anomaly_visualization.png</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plot_3d</span> <span class="o">=</span> <span class="n">visualizer</span><span class="p">.</span><span class="nf">plot_3d_traffic_visualization</span><span class="p">(</span><span class="n">flow_data</span><span class="p">)</span>
<span class="n">plot_3d</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="sh">'</span><span class="s">3d_traffic_visualization.png</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="5-practical-considerations-and-best-practices">5. Practical Considerations and Best Practices</h2>

<ol>
  <li><strong>Performance Optimization</strong>
```python
    <h1 id="use-pyshark-for-better-performance-with-large-packet-captures">Use PyShark for better performance with large packet captures</h1>
    <p>import pyshark</p>
  </li>
</ol>

<p>def capture_with_pyshark(interface, duration):
    capture = pyshark.LiveCapture(interface=interface)
    capture.sniff(timeout=duration)
    return capture</p>

<h1 id="use-multiprocessing-for-faster-analysis">Use multiprocessing for faster analysis</h1>
<p>from multiprocessing import Pool</p>

<p>def analyze_packet_chunk(packets):
    # Analysis code here
    pass</p>

<p>def parallel_analysis(all_packets, num_processes=4):
    chunk_size =</p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[Network Traffic Analysis with Python: A Practical Guide]]></summary></entry><entry><title type="html">Real-World Anonymization: Why It’s Trickier Than You Think</title><link href="http://localhost:4000/AIML/ai/2024/10/28/privacy-blog.html" rel="alternate" type="text/html" title="Real-World Anonymization: Why It’s Trickier Than You Think" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>http://localhost:4000/AIML/ai/2024/10/28/privacy-blog</id><content type="html" xml:base="http://localhost:4000/AIML/ai/2024/10/28/privacy-blog.html"><![CDATA[<p>[Previous sections remain the same]</p>

<h2 id="real-world-anonymization-why-its-trickier-than-you-think">Real-World Anonymization: Why It’s Trickier Than You Think</h2>

<h3 id="the-illusion-of-anonymity">The Illusion of Anonymity</h3>

<p>Let’s look at a typical “anonymized” dataset:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Original customer data
</span><span class="n">original_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">John Doe</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">34</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90210</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$299</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Jane Smith</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90001</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$199</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Bob Johnson</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90003</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$399</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1"># "Anonymized" version
</span><span class="n">anonymized_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">A742</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age_group</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">30-40</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">region</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$299</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">B234</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age_group</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">20-30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">region</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$199</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">C891</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age_group</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">40-50</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">region</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purchase</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">$399</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Looks safe, right? Wrong! Here’s why:</p>

<h3 id="how-anonymized-data-gets-compromised">How Anonymized Data Gets Compromised</h3>

<h4 id="1-the-linkage-attack">1. The Linkage Attack</h4>

<p>Let’s say we have this “anonymized” health dataset:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># "Anonymized" health records
</span><span class="n">health_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">patient_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">X47</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90210</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">condition</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">diabetes</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">patient_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Y82</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90001</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">condition</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">hypertension</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">patient_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Z93</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">46</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90003</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">condition</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">asthma</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>And a public voter registration database:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Publicly available voter records
</span><span class="n">voter_records</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">John Doe</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90210</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Jane Smith</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90001</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Bob Johnson</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">46</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90003</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<h5 id="how-the-attack-works">How the Attack Works:</h5>
<ol>
  <li>Find unique combinations in both datasets</li>
  <li>Match patterns (like age + zipcode)</li>
  <li>Re-identify individuals</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">demonstrate_linkage_attack</span><span class="p">(</span><span class="n">health_record</span><span class="p">,</span> <span class="n">voter_records</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">voter</span> <span class="ow">in</span> <span class="n">voter_records</span><span class="p">:</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">voter</span><span class="p">[</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="n">health_record</span><span class="p">[</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">]</span> <span class="ow">and</span> 
            <span class="n">voter</span><span class="p">[</span><span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="n">health_record</span><span class="p">[</span><span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">]):</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Found match: </span><span class="si">{</span><span class="n">voter</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> has </span><span class="si">{</span><span class="n">health_record</span><span class="p">[</span><span class="sh">'</span><span class="s">condition</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">No match found</span><span class="sh">"</span>

<span class="c1"># Example usage
</span><span class="nf">print</span><span class="p">(</span><span class="nf">demonstrate_linkage_attack</span><span class="p">(</span><span class="n">health_data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">voter_records</span><span class="p">))</span>
<span class="c1"># Output: Found match: John Doe has diabetes
</span></code></pre></div></div>

<h3 id="real-attack-examples">Real Attack Examples</h3>

<ol>
  <li><strong>The Netflix Prize Dataset (2007)</strong>
    <ul>
      <li>What happened: Netflix released 100 million “anonymized” movie ratings</li>
      <li>The attack: Researchers cross-referenced with public IMDB reviews</li>
      <li>Result: Successfully identified 84% of users [1]</li>
    </ul>
  </li>
  <li><strong>The AOL Search Data Leak (2006)</strong>
    <ul>
      <li>Released: 20 million web searches from 650,000 users</li>
      <li>Identification method: Unique patterns in search queries</li>
      <li>Famous case: User #4417749 identified as Thelma Arnold [9]</li>
    </ul>
  </li>
</ol>

<h3 id="better-anonymization-techniques">Better Anonymization Techniques</h3>

<h4 id="1-k-anonymity">1. K-Anonymity</h4>

<p>Ensures each record is similar to at least k-1 other records.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bad anonymization (vulnerable)
</span><span class="n">bad_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90210</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">flu</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90213</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">cold</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">90215</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">fever</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1"># K-anonymity (k=3)
</span><span class="n">k_anonymous_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age_range</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">25-30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">902**</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">flu</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age_range</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">25-30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">902**</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">cold</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">age_range</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">25-30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">zipcode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">902**</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">fever</span><span class="sh">"</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<h4 id="2-differential-privacy-in-action">2. Differential Privacy in Action</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">query_function</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
    <span class="n">true_count</span> <span class="o">=</span> <span class="nf">query_function</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">noise</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">laplace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">epsilon</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">true_count</span> <span class="o">+</span> <span class="n">noise</span><span class="p">)))</span>

<span class="c1"># Example usage
</span><span class="k">def</span> <span class="nf">count_disease</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">disease</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">data</span> <span class="k">if</span> <span class="n">record</span><span class="p">[</span><span class="sh">"</span><span class="s">disease</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="n">disease</span><span class="p">)</span>

<span class="n">flu_count</span> <span class="o">=</span> <span class="nf">count_with_privacy</span><span class="p">(</span><span class="n">k_anonymous_data</span><span class="p">,</span> 
                              <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nf">count_disease</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="sh">"</span><span class="s">flu</span><span class="sh">"</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Private count of flu cases: </span><span class="si">{</span><span class="n">flu_count</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="best-practices-for-data-anonymization">Best Practices for Data Anonymization</h3>

<ol>
  <li><strong>Use Multiple Techniques</strong>
    <ul>
      <li>Combine k-anonymity with differential privacy</li>
      <li>Example: First group data, then add noise</li>
    </ul>
  </li>
  <li><strong>Consider Temporal Aspects</strong>
    <ul>
      <li>Data over time can reveal patterns</li>
      <li>Solution: Regularly rotate identifiers</li>
    </ul>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bad practice: Static identifiers
</span><span class="n">user_123_purchases</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-01</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amount</span><span class="sh">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-02</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amount</span><span class="sh">"</span><span class="p">:</span> <span class="mi">150</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-03</span><span class="sh">"</span><span class="p">,</span> <span class="n">amount</span><span class="p">:</span> <span class="mi">200</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1"># Better: Rotating identifiers
</span><span class="n">user_purchases</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">A742</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-01</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amount</span><span class="sh">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">B234</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-02</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amount</span><span class="sh">"</span><span class="p">:</span> <span class="mi">150</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">user_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">C891</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2023-01-03</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amount</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<h2 id="additional-references">Additional References</h2>

<p>[9] Barbaro, M., &amp; Zeller, T. (2006). A Face Is Exposed for AOL Searcher No. 4417749. New York Times.</p>

<p>[10] Sweeney, L. (2002). k-anonymity: A model for protecting privacy. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems.</p>

<p>[These additions would be integrated into the full blog post, with the rest remaining as before]</p>

<hr />

<p>Would you like me to:</p>
<ol>
  <li>Add more specific attack scenarios?</li>
  <li>Include more code examples for privacy-preserving techniques?</li>
  <li>Expand on any particular section?</li>
</ol>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[[Previous sections remain the same]]]></summary></entry></feed>